/**
 *  Dialing Computer: A simulation of the dialing computer found on the TV show
 *  Stargate SG-1
 * 
 *  Copyright (C) 2010 Andrew Cox
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * EpisodeViewer.java
 *
 * Created on Nov 26, 2010, 2:31:52 PM
 */

package adcox.stargatecomputer.ui;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JScrollBar;
import javax.swing.ListModel;

/**
 *
 * @author Andrew
 */
public class EpisodeViewer extends javax.swing.JFrame {

    /** Creates new form EpisodeViewer */
    public EpisodeViewer() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        episodeListScrollPane = new javax.swing.JScrollPane();
        episodeList = new javax.swing.JList();
        episodeTextScrollPane = new javax.swing.JScrollPane();
        episodeText = new javax.swing.JTextArea();
        sg1Option = new javax.swing.JRadioButton();
        atlantisOption = new javax.swing.JRadioButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        episodeList.setModel(getEpisodeNames(showingSG1));
        episodeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                episodeChanged(evt);
            }
        });
        episodeListScrollPane.setViewportView(episodeList);

        episodeText.setColumns(20);
        episodeText.setLineWrap(true);
        episodeText.setRows(5);
        episodeText.setWrapStyleWord(true);
        episodeTextScrollPane.setViewportView(episodeText);

        sg1Option.setText("SG-1");
        sg1Option.setName("sg1Option"); // NOI18N
        sg1Option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sg1OptionActionPerformed(evt);
            }
        });

        atlantisOption.setText("Atlantis");
        atlantisOption.setName("atlantisOption"); // NOI18N
        atlantisOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atlantisOptionActionPerformed(evt);
            }
        });

        fileMenu.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        fileMenu.setText("File");

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");
        fileMenu.add(jRadioButtonMenuItem1);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(episodeListScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(episodeTextScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(41, 41, 41)
                        .add(sg1Option)
                        .add(27, 27, 27)
                        .add(atlantisOption)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(sg1Option)
                    .add(atlantisOption))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 25, Short.MAX_VALUE)
                .add(episodeTextScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 322, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(episodeListScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void episodeChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_episodeChanged
        String episode = (String)episodeList.getSelectedValue();
        if(episode != null){
            episode += ".txt";
            ArrayList<String> episodeLines = new ArrayList<String>();

            if(showingSG1)
                episodeLines = readFile("eps/sg1/" + episode);
            else
                episodeLines = readFile("eps/atl/" + episode);
            
            //error trapping:  Exit the function if readFile returns nothing
            if(episodeLines == null){
                return;
            }
            //clear lines from the textField
            episodeText.setText(null);
            //fill in the new lines
            for(int i = 0; i < episodeLines.size(); i++){
                episodeText.setText(episodeText.getText() + episodeLines.get(i) + '\n');
            }

            //set the startint position of both scroll bars the the start
            JScrollBar verticalScrollBar = episodeTextScrollPane.getVerticalScrollBar();
            JScrollBar horizontalScrollBar = episodeTextScrollPane.getHorizontalScrollBar();
            verticalScrollBar.setValue(verticalScrollBar.getMinimum());
            horizontalScrollBar.setValue(horizontalScrollBar.getMinimum());
            episodeText.setCaretPosition(0);
        }
    }//GEN-LAST:event_episodeChanged

    private void sg1OptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sg1OptionActionPerformed
        atlantisOption.setSelected(false);
        showingSG1 = true;
        episodeList.setModel(getEpisodeNames(showingSG1));      //reset the list
        //select the first value by default
        episodeList.setSelectedIndex(0);
        episodeText.setCaretPosition(0);
    }//GEN-LAST:event_sg1OptionActionPerformed

    private void atlantisOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atlantisOptionActionPerformed
        sg1Option.setSelected(false);
        showingSG1 = false;
        episodeList.setModel(getEpisodeNames(showingSG1));      //reset the list
        //select the first value by default
        episodeList.setSelectedIndex(0);
        episodeText.setCaretPosition(0);
    }//GEN-LAST:event_atlantisOptionActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EpisodeViewer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton atlantisOption;
    private javax.swing.JList episodeList;
    private javax.swing.JScrollPane episodeListScrollPane;
    private javax.swing.JTextArea episodeText;
    private javax.swing.JScrollPane episodeTextScrollPane;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JRadioButton sg1Option;
    // End of variables declaration//GEN-END:variables

    private boolean showingSG1 = true;

    private ListModel getEpisodeNames(boolean sg1){
        ArrayList<String> episodeNames = new ArrayList<String>();
        if(sg1){
            for(int s = 1; s < 11; s++){
                for(int e = 1; e < 21; e ++){
                    String episodeName = s + "." + e;
                    episodeNames.add(episodeName);
                }
            }
        }else{
            for(int s = 1; s < 4; s++){
                for(int e = 1; e < 21; e ++){
                    String episodeName = s + "." + e;
                    episodeNames.add(episodeName);
                }
            }
        }

        final String[] strings = new String[episodeNames.size()];
        for(int i = 0; i < episodeNames.size(); i++){
            strings[i] = episodeNames.get(i);
        }
        
        return new javax.swing.AbstractListModel(){
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        };
    }//==========================

     private static ArrayList<String> readFile(String filePath){
        try{
            FileReader in = new FileReader(filePath);
            BufferedReader buff = new BufferedReader(in);

            ArrayList<String> lines = new ArrayList<String>();
            String temp = new String();

            int length = 0;
            while((temp = buff.readLine()) != null){
                length++;
                lines.add(temp);
            }

            in.close();
            return lines;

        }
        catch (IOException e){
            System.err.println("Unable to read from file" + '\n' + e.toString());
            return null;
        }
    }//===================================
    
}
